@page "/Admin/Slider"
@page "/Admin/Slider/{id:int}"
@attribute [Authorize(Roles = "admin")]
@inject NavigationManager NavigationManager
@layout Forms
@using System.IO
@inject IWebHostEnvironment env

@using oswald_online_shop.Data.AdminServices.SliderAdminServices


<div class="flex w-full justify-center mt-20">
                  <div  class="shadow-2xl shadow-white absolute w-full top-28 sm:w-[250px] p-8 mx-auto flex flex-col bg-white rounded-md space-y-4">
@if(id != 0){
    <svg class="h-9 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z"/></svg>
}else{
<svg class="h-9 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M384 32C419.3 32 448 60.65 448 96V416C448 451.3 419.3 480 384 480H64C28.65 480 0 451.3 0 416V96C0 60.65 28.65 32 64 32H384zM224 368C237.3 368 248 357.3 248 344V280H312C325.3 280 336 269.3 336 256C336 242.7 325.3 232 312 232H248V168C248 154.7 237.3 144 224 144C210.7 144 200 154.7 200 168V232H136C122.7 232 112 242.7 112 256C112 269.3 122.7 280 136 280H200V344C200 357.3 210.7 368 224 368z"/></svg>}

 <input @bind="@slider.url" class="px-3 py-2.5 border-2 border-transparent border-gray-200 rounded-md" disabled>
            <label
  class="
    flex flex-col
    items-center
    px-4
py-1
    bg-indigo-50
    rounded-md
    shadow-md
    tracking-wide
    uppercase
    border border-blue
    cursor-pointer
    hover:bg-purple-200 hover:text-black
    text-purple-600
    ease-linear
    transition-all
    duration-300
  "
>
  <span class="mt-2 text-base leading-normal">Select a image</span>
  <InputFile class="hidden" OnChange="OnInputFileChange"></InputFile>
</label>
@if(id != 0){
                     <button class="px-2 py-1.5 rounded-md bg-teal-400 hover:bg-teal-700 text-white mt-3" @onclick="saveSliderImage" >Ediar</button>
                     }else{
                                      <button class="px-2 py-1.5 rounded-md bg-teal-400 hover:bg-teal-700 text-white mt-3" @onclick="saveSliderImage" >Agregar</button>}
                                      

                     <a href="/Admin/SliderList" class="px-2 py-1.5 rounded-md bg-rose-600 hover:bg-rose-700 text-white mt-3 text-center"><button >Cancelar</button></a>

              </div>



</div>

@if (slider == null)
{

}
else
{


}

@code {
    [Parameter]
    public int id { get; set; }

    long maxAllowedSize = 200000000;

    private SliderOswald slider = new SliderOswald();
    private static MyDBContext myDBContext = new MyDBContext();
    private static SliderAdminService sliderAdminServices = new SliderAdminService  (myDBContext);


    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(id != 0){
            slider = await sliderAdminServices.getOnlySliderImage(id);
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }


    public async Task saveSliderImage()
    {
        try
        {
            await sliderAdminServices.saveSliderImage(slider);
            NavigationManager.NavigateTo("/Admin/sliderlist");

        }
        catch(Exception e)
        {
            throw e;


        }

    }


private void OnInputFileChange(InputFileChangeEventArgs e)
{
    selectedFiles = e.GetMultipleFiles();
    this.StateHasChanged();
    OnSubmit();
}


private async void OnSubmit()
{
    foreach (var file in selectedFiles)
    {
        string [] rutas = {env.WebRootPath, file.Name};
        string nuevo= String.Join("/",rutas);
        using (Stream stream = file.OpenReadStream(maxAllowedSize)){

                    var ruta ="/";
        var path = $"{env.WebRootPath}{ruta}{file.Name}";
        FileStream fs = File.Create(nuevo);
        await stream.CopyToAsync(fs);
        stream.Close();
        fs.Close();
        slider.url = file.Name;
        Console.WriteLine(slider.url);
    }
        this.StateHasChanged();

    }
}


}
