@page "/"
@inject IJSRuntime js
@using oswald_online_shop.Data.AdminServices.SliderAdminServices


<AuthorizeView>
<Authorized>

<div class="min-h-screen flex flex-col mt-26 items-center space-y-4" >
<h3 class="text-2xl font-normal text-red-400">Ya estas autoriazdo para accerder a esta ruta </h3>

<div class="relative inset-x-0 flex justify-center group">
    <span class="absolute  bg-indigo-500 w-36 rounded-lg transform translate-x-9 translate-y-6 h-12 transition duration-500 group-hover:translate-y-0 group-hover:translate-x-0"></span>

  <span class="absolute  bg-black w-44 rounded-lg group-hover:translate-x-0 transform translate-x-3 translate-y-3.5 group-hover:translate-y-0 h-12 transition duration-500"></span>

<a class="relative text-blue-300 w-44 text-center rounded-lg text-xl cursor-pointer bg-white shadow-xl px-3 py-3 group-hover:bg-slate-800 group-hover:text-white transition duration-500 font-semibold" href="/productlist ">Volver al inicio</a>
</div>
</div>
</Authorized>
<NotAuthorized>
<div class="mt-10  max-w-lg sm:max-w-xl md:max-w-2xl lg:max-w-7xl mx-auto"> 

@if(sliders == null) {

}else{
<MudCarousel Class="mud-width-full rounded-md shadow-2xl shadow-black" Style="height:600px;" ShowArrows="@arrows" ShowBullets="@bullets" AutoCycle="@autocycle" TData="object">
    @foreach(var sliderImage in sliders)
{

    <MudCarouselItem Transition="transition" Style="@($"color:{Colors.Grey.Lighten4};")">

        <div class="d-flex" style="height:100%">
                @if(sliderImage.url.Contains("mp4")){
<video class="w-full h-full object-cover" autoplay loop muted  src="@sliderImage.url"></video>
    }else{
                                  <img class="w-full object-cover" src="@sliderImage.url" alt="shop">
    }

        </div>
    </MudCarouselItem>
}

</MudCarousel>

}


</div>
</NotAuthorized>

</AuthorizeView>

@code{ 
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool arrows = true;
    private bool bullets = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
        public IEnumerable<SliderOswald> sliders{ get; set; }
    private static MyDBContext myDBContext = new MyDBContext();
    public SliderAdminService sliderAdminService = new SliderAdminService(myDBContext); 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            sliders = await sliderAdminService.getAllSliderImage();
        }catch(Exception e)
        {
            throw e;
        }
    }
private async Task DisplayGreetingAlert(){
    var authState = await authenticationState;
    var message =$"hello{authState.User.Identity.Name}";
    await js.InvokeVoidAsync("alert", message);
}

}
